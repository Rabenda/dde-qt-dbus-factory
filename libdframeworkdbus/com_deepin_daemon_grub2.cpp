/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Grub2 -p com_deepin_daemon_grub2 ../xml/com.deepin.daemon.Grub2.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "com_deepin_daemon_grub2.h"

/*
 * Implementation of interface class Grub2
 */

Grub2::Grub2(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
{
    connect(this, &Grub2::propertyChanged, this, &Grub2::onPropertyChanged);
}

Grub2::~Grub2()
{
}

void Grub2::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("DefaultEntry"))
    {
        QString DefaultEntry = qvariant_cast<QString>(value);
        if (m_DefaultEntry != DefaultEntry)
        {
            m_DefaultEntry = DefaultEntry;
            emit DefaultEntryChanged(DefaultEntry);
            return;
        }
    }

    if (propName == QStringLiteral("EnableTheme"))
    {
        bool EnableTheme = qvariant_cast<bool>(value);
        if (m_EnableTheme != EnableTheme)
        {
            m_EnableTheme = EnableTheme;
            emit EnableThemeChanged(EnableTheme);
            return;
        }
    }

    if (propName == QStringLiteral("FixSettingsAlways"))
    {
        bool FixSettingsAlways = qvariant_cast<bool>(value);
        if (m_FixSettingsAlways != FixSettingsAlways)
        {
            m_FixSettingsAlways = FixSettingsAlways;
            emit FixSettingsAlwaysChanged(FixSettingsAlways);
            return;
        }
    }

    if (propName == QStringLiteral("Resolution"))
    {
        QString Resolution = qvariant_cast<QString>(value);
        if (m_Resolution != Resolution)
        {
            m_Resolution = Resolution;
            emit ResolutionChanged(Resolution);
            return;
        }
    }

    if (propName == QStringLiteral("Timeout"))
    {
        int Timeout = qvariant_cast<int>(value);
        if (m_Timeout != Timeout)
        {
            m_Timeout = Timeout;
            emit TimeoutChanged(Timeout);
            return;
        }
    }

    if (propName == QStringLiteral("Updating"))
    {
        bool Updating = qvariant_cast<bool>(value);
        if (m_Updating != Updating)
        {
            m_Updating = Updating;
            emit UpdatingChanged(Updating);
            return;
        }
    }

    Q_UNREACHABLE();
}
