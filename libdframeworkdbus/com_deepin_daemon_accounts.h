/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Accounts -p com_deepin_daemon_accounts ../xml/com.deepin.daemon.Accounts.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DAEMON_ACCOUNTS_H
#define COM_DEEPIN_DAEMON_ACCOUNTS_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Accounts
 */
class Accounts: public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Accounts"; }

public:
    Accounts(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Accounts();

    Q_PROPERTY(bool AllowGuest READ allowGuest NOTIFY AllowGuestChanged)
    inline bool allowGuest()
    { return qvariant_cast< bool >(internalPropGet("AllowGuest", &m_AllowGuest)); }

    Q_PROPERTY(QString GuestIcon READ guestIcon NOTIFY GuestIconChanged)
    inline QString guestIcon()
    { return qvariant_cast< QString >(internalPropGet("GuestIcon", &m_GuestIcon)); }

    Q_PROPERTY(QStringList UserList READ userList NOTIFY UserListChanged)
    inline QStringList userList()
    { return qvariant_cast< QStringList >(internalPropGet("UserList", &m_UserList)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AllowGuestAccount(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AllowGuestAccount"), argumentList);
    }

    inline QDBusPendingReply<QString> CreateGuestAccount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CreateGuestAccount"), argumentList);
    }

    inline QDBusPendingReply<> CreateUser(const QString &in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("CreateUser"), argumentList);
    }

    inline QDBusPendingReply<bool> DeleteUser(const QString &in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("DeleteUser"), argumentList);
    }

    inline QDBusPendingReply<QString> FindUserById(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("FindUserById"), argumentList);
    }

    inline QDBusPendingReply<QString> FindUserByName(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("FindUserByName"), argumentList);
    }

    inline QDBusPendingReply<bool, QString, int> IsPasswordValid(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsPasswordValid"), argumentList);
    }
    inline QDBusReply<bool> IsPasswordValid(const QString &in0, QString &out1, int &out2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("IsPasswordValid"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
            out2 = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<bool, QString, int> IsUsernameValid(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsUsernameValid"), argumentList);
    }
    inline QDBusReply<bool> IsUsernameValid(const QString &in0, QString &out1, int &out2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("IsUsernameValid"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
            out2 = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, bool> RandUserIcon()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RandUserIcon"), argumentList);
    }
    inline QDBusReply<QString> RandUserIcon(bool &out1)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("RandUserIcon"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
    void Error(uint in0, const QString &in1, const QString &in2);
    void Success(uint in0, const QString &in1);
    void UserAdded(const QString &in0);
    void UserDeleted(const QString &in0);
// begin property changed signals
    void AllowGuestChanged(bool  value) const;
    void GuestIconChanged(const QString & value) const;
    void UserListChanged(const QStringList & value) const;

// begin private slots
private Q_SLOTS:
    void onPropertyChanged(const QString &propName, const QVariant &value);

// begin private member vaiables
private:
    bool m_AllowGuest;
    QString m_GuestIcon;
    QStringList m_UserList;
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::Accounts Accounts;
    }
  }
}
#endif
