/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Grub2 -p com_deepin_daemon_grub2 ../xml/com.deepin.daemon.Grub2.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DAEMON_GRUB2_H
#define COM_DEEPIN_DAEMON_GRUB2_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Grub2
 */
class Grub2: public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Grub2"; }

public:
    Grub2(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Grub2();

    Q_PROPERTY(QString DefaultEntry READ defaultEntry WRITE setDefaultEntry NOTIFY DefaultEntryChanged)
    inline QString defaultEntry()
    { return qvariant_cast< QString >(internalPropGet("DefaultEntry", &m_DefaultEntry)); }
    inline void setDefaultEntry(const QString &value)
    { internalPropSet("DefaultEntry", QVariant::fromValue(value), &m_DefaultEntry); }

    Q_PROPERTY(bool EnableTheme READ enableTheme WRITE setEnableTheme NOTIFY EnableThemeChanged)
    inline bool enableTheme()
    { return qvariant_cast< bool >(internalPropGet("EnableTheme", &m_EnableTheme)); }
    inline void setEnableTheme(bool value)
    { internalPropSet("EnableTheme", QVariant::fromValue(value), &m_EnableTheme); }

    Q_PROPERTY(bool FixSettingsAlways READ fixSettingsAlways WRITE setFixSettingsAlways NOTIFY FixSettingsAlwaysChanged)
    inline bool fixSettingsAlways()
    { return qvariant_cast< bool >(internalPropGet("FixSettingsAlways", &m_FixSettingsAlways)); }
    inline void setFixSettingsAlways(bool value)
    { internalPropSet("FixSettingsAlways", QVariant::fromValue(value), &m_FixSettingsAlways); }

    Q_PROPERTY(QString Resolution READ resolution WRITE setResolution NOTIFY ResolutionChanged)
    inline QString resolution()
    { return qvariant_cast< QString >(internalPropGet("Resolution", &m_Resolution)); }
    inline void setResolution(const QString &value)
    { internalPropSet("Resolution", QVariant::fromValue(value), &m_Resolution); }

    Q_PROPERTY(int Timeout READ timeout WRITE setTimeout NOTIFY TimeoutChanged)
    inline int timeout()
    { return qvariant_cast< int >(internalPropGet("Timeout", &m_Timeout)); }
    inline void setTimeout(int value)
    { internalPropSet("Timeout", QVariant::fromValue(value), &m_Timeout); }

    Q_PROPERTY(bool Updating READ updating NOTIFY UpdatingChanged)
    inline bool updating()
    { return qvariant_cast< bool >(internalPropGet("Updating", &m_Updating)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetAvailableResolutions()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAvailableResolutions"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetSimpleEntryTitles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSimpleEntryTitles"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> Setup(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Setup"), argumentList);
    }

    inline QDBusPendingReply<> SetupTheme(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetupTheme"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
    void DefaultEntryChanged(const QString & value);
    void EnableThemeChanged(bool  value);
    void FixSettingsAlwaysChanged(bool  value);
    void ResolutionChanged(const QString & value);
    void TimeoutChanged(int  value);
    void UpdatingChanged(bool  value);

// begin private slots
private Q_SLOTS:
    void onPropertyChanged(const QString &propName, const QVariant &value);

// begin private member vaiables
private:
    QString m_DefaultEntry;
    bool m_EnableTheme;
    bool m_FixSettingsAlways;
    QString m_Resolution;
    int m_Timeout;
    bool m_Updating;
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::Grub2 Grub2;
    }
  }
}
#endif
