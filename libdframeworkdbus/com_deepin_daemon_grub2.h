/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Grub2 -p com_deepin_daemon_grub2 xml/com.deepin.daemon.Grub2.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DAEMON_GRUB2_H
#define COM_DEEPIN_DAEMON_GRUB2_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Grub2
 */
class Grub2: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.daemon.Grub2")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
            const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                QGenericArgument value(QMetaType::typeName(p.type()), const_cast<void*>(changedProps[prop].constData()));
                if (p.name() == prop) {
                    emit p.notifySignal().invoke(this, value);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Grub2"; }

public:
    Grub2(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Grub2();

    Q_PROPERTY(QString DefaultEntry READ defaultEntry WRITE setDefaultEntry NOTIFY DefaultEntryChanged)
    inline QString defaultEntry() const
    { return qvariant_cast< QString >(property("DefaultEntry")); }
    inline void setDefaultEntry(const QString &value)
    { setProperty("DefaultEntry", QVariant::fromValue(value)); }

    Q_PROPERTY(bool EnableTheme READ enableTheme WRITE setEnableTheme NOTIFY EnableThemeChanged)
    inline bool enableTheme() const
    { return qvariant_cast< bool >(property("EnableTheme")); }
    inline void setEnableTheme(bool value)
    { setProperty("EnableTheme", QVariant::fromValue(value)); }

    Q_PROPERTY(bool FixSettingsAlways READ fixSettingsAlways WRITE setFixSettingsAlways NOTIFY FixSettingsAlwaysChanged)
    inline bool fixSettingsAlways() const
    { return qvariant_cast< bool >(property("FixSettingsAlways")); }
    inline void setFixSettingsAlways(bool value)
    { setProperty("FixSettingsAlways", QVariant::fromValue(value)); }

    Q_PROPERTY(QString Resolution READ resolution WRITE setResolution NOTIFY ResolutionChanged)
    inline QString resolution() const
    { return qvariant_cast< QString >(property("Resolution")); }
    inline void setResolution(const QString &value)
    { setProperty("Resolution", QVariant::fromValue(value)); }

    Q_PROPERTY(int Timeout READ timeout WRITE setTimeout NOTIFY TimeoutChanged)
    inline int timeout() const
    { return qvariant_cast< int >(property("Timeout")); }
    inline void setTimeout(int value)
    { setProperty("Timeout", QVariant::fromValue(value)); }

    Q_PROPERTY(bool Updating READ updating NOTIFY UpdatingChanged)
    inline bool updating() const
    { return qvariant_cast< bool >(property("Updating")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> GetAvailableResolutions()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAvailableResolutions"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetSimpleEntryTitles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSimpleEntryTitles"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> Setup(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Setup"), argumentList);
    }

    inline QDBusPendingReply<> SetupTheme(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetupTheme"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
void DefaultEntryChanged(const QString & value);
void EnableThemeChanged(bool  value);
void FixSettingsAlwaysChanged(bool  value);
void ResolutionChanged(const QString & value);
void TimeoutChanged(int  value);
void UpdatingChanged(bool  value);
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::Grub2 Grub2;
    }
  }
}
#endif
